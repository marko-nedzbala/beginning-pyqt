
https://github.com/Apress/Beginning-PyQt--second-edition



Chapter01
Getting Started with PyQt

$ pip install PyQt6

QApplication: responsible for managing the application's main event loop and widget initialization and finalization

Basic PyQt setup
import sys
from PyQt6.QtWidgets import QApplication, QWidget

class EmptyWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initializeUI()

    def initializeUI(self):
        # x, y, width, height
        self.setGeometry(200, 100, 400, 300)
        self.setWindowTitle('Empty Window in PyQt')
        self.show()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = EmptyWindow()
    sys.exit(app.exec())



Chapter02
Building a Simple GUI

QLabel



Chapter03
Adding More Functionality with Widgets

Communication between objects in QT is handled by signals and slots
Signals: generated whenver an event occurs, signals need to be handled in some way
Slots: methods that are connected to an event and executed in response to the signal

button.clicked.connect(self.buttonClicked)
widget.signal.connect(self.slot)

QObject has a sender() returns the object that sends the signal
sender = self.sender()

Dialog box
modal dialogs: block user interaction from the rest of the program
modeless dialogs: allow the user to interact with both the dialog and the rest of the application

When a QWidget is closed, QCloseEvent object is generated, but widgets and windows are not actually closed.
Want to handle the QApplication.lastWindowClosed() to actually close the window



Chapter04
Learning About Layout Management






















































































